datasource db {
    provider = "sqlite"
    url      = "file:../../bible-api.dev.db"
}

generator client {
    provider = "prisma-client-js"
    output   = "./prisma-gen"
}

model Translation {
    id            String @id
    name          String
    website       String
    licenseUrl    String
    shortName     String?
    englishName   String
    language      String
    textDirection String

    // The SHA-256 hash of the translation
    // includes everything about the translation, including the books, chapters, verses, footnotes, etc.
    sha256         String?
    
    books        Book[]
    chapters     Chapter[]
    verses       ChapterVerse[]
    footnotes    ChapterFootnote[]
    audioUrls    ChapterAudioUrl[]
}

model InputFile {
    // The ID of the translation that the file is for
    translationId String

    // The name of the file
    name String

    format String

    // The SHA-256 hash of the file
    sha256 String
    
    sizeInBytes Int

    @@id([translationId, name])
}

model Book {
    id String

    translationId String
    translation Translation @relation(fields: [translationId], references: [id])

    name String
    commonName String
    title String?
    order Int

    numberOfChapters Int

    // The SHA-256 hash of the book
    sha256 String?

    chapters Chapter[]
    verses ChapterVerse[]
    footnotes ChapterFootnote[]
    audioUrls ChapterAudioUrl[]

    @@id([translationId, id])
}

model Chapter {
    number Int

    bookId String
    book Book @relation(fields: [translationId, bookId], references: [translationId, id])

    translationId String
    translation Translation @relation(fields: [translationId], references: [id])

    json String // The JSON of the chapter

    // The SHA-256 hash of the chapter
    sha256 String?

    verses ChapterVerse[]
    footnotes ChapterFootnote[]
    audioUrls ChapterAudioUrl[]

    @@id([translationId, bookId, number])
}

model ChapterAudioUrl {
    number Int
    bookId String
    book Book @relation(fields: [translationId, bookId], references: [translationId, id])

    translationId String
    translation Translation @relation(fields: [translationId], references: [id])

    chapter Chapter @relation(fields: [translationId, bookId, number], references: [translationId, bookId, number])

    reader String
    url String

    @@id([translationId, bookId, number, reader])
}

model ChapterVerse {
    number Int

    chapterNumber Int
    chapter Chapter @relation(fields: [translationId, bookId, chapterNumber], references: [translationId, bookId, number])

    bookId String
    book Book @relation(fields: [translationId, bookId], references: [translationId, id])

    translationId String
    translation Translation @relation(fields: [translationId], references: [id])

    text String // The text of the verse
    contentJson String // The JSON of the verse content

    // The SHA-256 hash of the verse
    sha256 String?

    footnotes ChapterFootnote[]

    @@id([translationId, bookId, chapterNumber, number])
}

model ChapterFootnote {
    id Int

    chapterNumber Int
    chapter Chapter @relation(fields: [translationId, bookId, chapterNumber], references: [translationId, bookId, number])

    bookId String
    book Book @relation(fields: [translationId, bookId], references: [translationId, id])

    translationId String
    translation Translation @relation(fields: [translationId], references: [id])

    text String

    // The SHA-256 hash of the footnote
    sha256 String?

    verseNumber Int?
    verse ChapterVerse? @relation(fields: [translationId, bookId, chapterNumber, verseNumber], references: [translationId, bookId, chapterNumber, number])

    @@id([translationId, bookId, chapterNumber, id])
}
