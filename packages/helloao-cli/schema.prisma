datasource db {
    provider = "sqlite"
    url      = "file:../../bible-api.dev.db"
}

generator client {
    provider = "prisma-client-js"
    output   = "./prisma-gen"
}

model Translation {
    id            String @id
    name          String
    website       String
    licenseUrl    String
    licenseNotes  String?
    shortName     String?
    englishName   String
    language      String
    textDirection String

    // The SHA-256 hash of the translation
    // includes everything about the translation, including the books, chapters, verses, footnotes, etc.
    sha256         String?
    
    books        Book[]
    chapters     Chapter[]
    verses       ChapterVerse[]
    footnotes    ChapterFootnote[]
    audioUrls    ChapterAudioUrl[]
}

model Commentary {
    id            String @id
    name          String
    website       String
    licenseUrl    String
    licenseNotes  String?
    englishName   String
    language      String
    textDirection String

    // The SHA-256 hash of the translation
    // includes everything about the translation, including the books, chapters, verses, footnotes, etc.
    sha256         String?
    
    books        CommentaryBook[]
    chapters     CommentaryChapter[]
    verses       CommentaryChapterVerse[]
    profiles     CommentaryProfile[]
}

// The ebible.org source for a particular translation
// Contains metadata that is useful for managing downloads
model EBibleSource {
    id String @id
    
    // The URL to the USFM zip file download
    usfmZipUrl String?
    // The ETag of the downloaded USFM zip file
    usfmZipEtag String?

    languageCode String
    title String
    redistributable Boolean
    description String
    copyright String
    FCBHID String
    updateDate DateTime
    sourceDate DateTime

    oldTestamentBooks Int
    oldTestamentChapters Int
    oldTestamentVerses Int
    newTestamentBooks Int
    newTestamentChapters Int
    newTestamentVerses Int
    apocryphaBooks Int
    apocryphaChapters Int
    apocryphaVerses Int

    // The ID of the translation that the source is for
    translationId String

    // The date that the source was downloaded
    usfmDownloadDate DateTime?
    
    // The path that the USFM was downloaded to
    usfmDownloadPath String?

    // The SHA-256 hash of the source
    // Can be used to determine if the source has changed
    sha256 String?
}

// Files that were input into the API generator
model InputFile {
    // The ID of the translation that the file is for
    translationId String

    // The name of the file
    name String

    format String

    // The SHA-256 hash of the file
    sha256 String
    
    sizeInBytes Int

    @@id([translationId, name])
}

model Book {
    id String

    translationId String
    translation Translation @relation(fields: [translationId], references: [id])

    name String
    commonName String
    title String?
    order Int

    numberOfChapters Int

    // The SHA-256 hash of the book
    sha256 String?

    chapters Chapter[]
    verses ChapterVerse[]
    footnotes ChapterFootnote[]
    audioUrls ChapterAudioUrl[]

    @@id([translationId, id])
}

model CommentaryBook {
    id String

    commentaryId String
    commentary Commentary @relation(fields: [commentaryId], references: [id])

    name String
    commonName String
    introduction String?
    introductionSummary String?
    order Int

    numberOfChapters Int

    // The SHA-256 hash of the book
    sha256 String?

    chapters CommentaryChapter[]
    verses CommentaryChapterVerse[]

    @@id([commentaryId, id])
}

model CommentaryProfile {
    id String

    commentaryId String
    commentary Commentary @relation(fields: [commentaryId], references: [id])

    subject String
    content String

    referenceBook String?
    referenceChapter Int?
    referenceVerse Int?
    referenceEndChapter Int?
    referenceEndVerse Int?

    json String // The JSON of the profile

    // The SHA-256 hash of the profile
    sha256 String?

    @@id([commentaryId, id])
}

model Chapter {
    number Int

    bookId String
    book Book @relation(fields: [translationId, bookId], references: [translationId, id])

    translationId String
    translation Translation @relation(fields: [translationId], references: [id])

    json String // The JSON of the chapter

    // The SHA-256 hash of the chapter
    sha256 String?

    verses ChapterVerse[]
    footnotes ChapterFootnote[]
    audioUrls ChapterAudioUrl[]

    @@id([translationId, bookId, number])
}

model CommentaryChapter {
    number Int

    bookId String
    book CommentaryBook @relation(fields: [commentaryId, bookId], references: [commentaryId, id])

    commentaryId String
    commentary Commentary @relation(fields: [commentaryId], references: [id])

    introduction String?
    json String // The JSON of the chapter

    // The SHA-256 hash of the chapter
    sha256 String?

    verses CommentaryChapterVerse[]

    @@id([commentaryId, bookId, number])
}

model ChapterAudioUrl {
    number Int
    bookId String
    book Book @relation(fields: [translationId, bookId], references: [translationId, id])

    translationId String
    translation Translation @relation(fields: [translationId], references: [id])

    chapter Chapter @relation(fields: [translationId, bookId, number], references: [translationId, bookId, number])

    reader String
    url String

    @@id([translationId, bookId, number, reader])
}

model ChapterVerse {
    number Int

    chapterNumber Int
    chapter Chapter @relation(fields: [translationId, bookId, chapterNumber], references: [translationId, bookId, number])

    bookId String
    book Book @relation(fields: [translationId, bookId], references: [translationId, id])

    translationId String
    translation Translation @relation(fields: [translationId], references: [id])

    text String // The text of the verse
    contentJson String // The JSON of the verse content

    // The SHA-256 hash of the verse
    sha256 String?

    footnotes ChapterFootnote[]

    @@id([translationId, bookId, chapterNumber, number])
}

model CommentaryChapterVerse {
    number Int

    chapterNumber Int
    chapter CommentaryChapter @relation(fields: [commentaryId, bookId, chapterNumber], references: [commentaryId, bookId, number])

    bookId String
    book CommentaryBook @relation(fields: [commentaryId, bookId], references: [commentaryId, id])

    commentaryId String
    commentary Commentary @relation(fields: [commentaryId], references: [id])

    text String // The text of the verse
    contentJson String // The JSON of the verse content

    // The SHA-256 hash of the verse
    sha256 String?

    @@id([commentaryId, bookId, chapterNumber, number])
}

model ChapterFootnote {
    id Int

    chapterNumber Int
    chapter Chapter @relation(fields: [translationId, bookId, chapterNumber], references: [translationId, bookId, number])

    bookId String
    book Book @relation(fields: [translationId, bookId], references: [translationId, id])

    translationId String
    translation Translation @relation(fields: [translationId], references: [id])

    text String

    // The SHA-256 hash of the footnote
    sha256 String?

    verseNumber Int?
    verse ChapterVerse? @relation(fields: [translationId, bookId, chapterNumber, verseNumber], references: [translationId, bookId, chapterNumber, number])

    @@id([translationId, bookId, chapterNumber, id])
}
